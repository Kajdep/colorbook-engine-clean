import React, { ErrorInfo } from 'react';\nimport { useAppStore } from '../store/useAppStore';\n\n// Enhanced error boundary with detailed logging\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error?: Error;\n  errorInfo?: ErrorInfo;\n  errorId?: string;\n}\n\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  ErrorBoundaryState\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return {\n      hasError: true,\n      error,\n      errorId: Date.now().toString(36) + Math.random().toString(36).substr(2)\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    const errorData = {\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack,\n      },\n      errorInfo: {\n        componentStack: errorInfo.componentStack,\n      },\n      errorId: this.state.errorId,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n      userId: useAppStore.getState().user?.id,\n    };\n\n    // Send to error tracking service\n    this.reportError(errorData);\n    \n    this.setState({ errorInfo });\n  }\n\n  private async reportError(errorData: any) {\n    try {\n      // Send to multiple error tracking services\n      await Promise.allSettled([\n        this.sendToSentry(errorData),\n        this.sendToLogRocket(errorData),\n        this.sendToCustomEndpoint(errorData)\n      ]);\n    } catch (reportingError) {\n      console.error('Failed to report error:', reportingError);\n    }\n  }\n\n  private async sendToSentry(errorData: any) {\n    // Sentry integration\n    if (window.Sentry) {\n      window.Sentry.captureException(errorData.error, {\n        extra: errorData,\n        tags: {\n          component: 'ErrorBoundary',\n          errorId: errorData.errorId\n        }\n      });\n    }\n  }\n\n  private async sendToLogRocket(errorData: any) {\n    // LogRocket integration\n    if (window.LogRocket) {\n      window.LogRocket.captureException(errorData.error);\n    }\n  }\n\n  private async sendToCustomEndpoint(errorData: any) {\n    // Send to our backend error tracking\n    try {\n      await fetch('/api/errors', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(errorData)\n      });\n    } catch (error) {\n      // Silently fail if backend is down\n      console.warn('Backend error reporting failed:', error);\n    }\n  }\n\n  private handleReload = () => {\n    window.location.reload();\n  };\n\n  private handleRetry = () => {\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n          <div className=\"max-w-md w-full bg-white rounded-lg shadow-lg p-6\">\n            <div className=\"text-center mb-6\">\n              <div className=\"text-red-500 text-6xl mb-4\">ðŸ’¥</div>\n              <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n                Oops! Something went wrong\n              </h1>\n              <p className=\"text-gray-600\">\n                We're sorry for the inconvenience. The error has been reported to our team.\n              </p>\n            </div>\n\n            <div className=\"bg-gray-50 rounded-lg p-4 mb-6\">\n              <div className=\"text-sm text-gray-600\">\n                <strong>Error ID:</strong> {this.state.errorId}\n              </div>\n              {process.env.NODE_ENV === 'development' && (\n                <details className=\"mt-2\">\n                  <summary className=\"cursor-pointer text-sm font-medium\">\n                    Technical Details (Dev Mode)\n                  </summary>\n                  <pre className=\"mt-2 text-xs bg-gray-100 p-2 rounded overflow-auto\">\n                    {this.state.error?.stack}\n                  </pre>\n                </details>\n              )}\n            </div>\n\n            <div className=\"flex gap-3\">\n              <button\n                onClick={this.handleRetry}\n                className=\"flex-1 bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors\"\n              >\n                Try Again\n              </button>\n              <button\n                onClick={this.handleReload}\n                className=\"flex-1 bg-gray-600 text-white py-2 px-4 rounded-lg hover:bg-gray-700 transition-colors\"\n              >\n                Reload Page\n              </button>\n            </div>\n\n            <div className=\"mt-4 text-center\">\n              <a \n                href=\"mailto:support@colorbookengine.com?subject=Error Report&body=Error ID: {this.state.errorId}\"\n                className=\"text-sm text-blue-600 hover:underline\"\n              >\n                Contact Support\n              </a>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;